/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.comdnmr.fit.calc;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.optim.PointValuePair;
import org.comdnmr.data.BondVectorData;
import org.comdnmr.modelfree.RelaxDataValue;
import org.comdnmr.modelfree.RelaxEquations;
import org.comdnmr.modelfree.RelaxFit;
import org.comdnmr.modelfree.RelaxFit.DiffusionType;
import org.junit.Test;
import org.junit.Assert;

/**
 *
 * @author Martha
 */
public class DRefineTest {

    //Values for 1P7F.pdb residue 55
    private final double[][] xVals = {{0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 1.0, 0.0}, {0.0, 0.0, 2.0, 0.0}, {1.0, 0.0, 0.0, 0.0}, {1.0, 0.0, 1.0, 0.0}, {1.0, 0.0, 2.0, 0.0}, {2.0, 0.0, 0.0, 0.0}, {2.0, 0.0, 1.0, 0.0}, {2.0, 0.0, 2.0, 0.0}, {3.0, 0.0, 0.0, 0.0}, {3.0, 0.0, 1.0, 0.0}, {3.0, 0.0, 2.0, 0.0}, {4.0, 0.0, 0.0, 0.0}, {4.0, 0.0, 1.0, 0.0}, {4.0, 0.0, 2.0, 0.0}, {0.0, 1.0, 0.0, 1.0}, {0.0, 1.0, 1.0, 1.0}, {0.0, 1.0, 2.0, 1.0}, {1.0, 1.0, 0.0, 1.0}, {1.0, 1.0, 1.0, 1.0}, {1.0, 1.0, 2.0, 1.0}, {2.0, 1.0, 0.0, 1.0}, {2.0, 1.0, 1.0, 1.0}, {2.0, 1.0, 2.0, 1.0}, {3.0, 1.0, 0.0, 1.0}, {3.0, 1.0, 1.0, 1.0}, {3.0, 1.0, 2.0, 1.0}, {4.0, 1.0, 0.0, 1.0}, {4.0, 1.0, 1.0, 1.0}, {4.0, 1.0, 2.0, 1.0}, {0.0, 2.0, 0.0, 2.0}, {0.0, 2.0, 1.0, 2.0}, {0.0, 2.0, 2.0, 2.0}, {1.0, 2.0, 0.0, 2.0}, {1.0, 2.0, 1.0, 2.0}, {1.0, 2.0, 2.0, 2.0}, {2.0, 2.0, 0.0, 2.0}, {2.0, 2.0, 1.0, 2.0}, {2.0, 2.0, 2.0, 2.0}, {3.0, 2.0, 0.0, 2.0}, {3.0, 2.0, 1.0, 2.0}, {3.0, 2.0, 2.0, 2.0}, {4.0, 2.0, 0.0, 2.0}, {4.0, 2.0, 1.0, 2.0}, {4.0, 2.0, 2.0, 2.0}, {0.0, 3.0, 0.0, 3.0}, {0.0, 3.0, 1.0, 3.0}, {0.0, 3.0, 2.0, 3.0}, {1.0, 3.0, 0.0, 3.0}, {1.0, 3.0, 1.0, 3.0}, {1.0, 3.0, 2.0, 3.0}, {2.0, 3.0, 0.0, 3.0}, {2.0, 3.0, 1.0, 3.0}, {2.0, 3.0, 2.0, 3.0}, {3.0, 3.0, 0.0, 3.0}, {3.0, 3.0, 1.0, 3.0}, {3.0, 3.0, 2.0, 3.0}, {4.0, 3.0, 0.0, 3.0}, {4.0, 3.0, 1.0, 3.0}, {4.0, 3.0, 2.0, 3.0}, {0.0, 4.0, 0.0, 4.0}, {0.0, 4.0, 1.0, 4.0}, {0.0, 4.0, 2.0, 4.0}, {1.0, 4.0, 0.0, 4.0}, {1.0, 4.0, 1.0, 4.0}, {1.0, 4.0, 2.0, 4.0}, {2.0, 4.0, 0.0, 4.0}, {2.0, 4.0, 1.0, 4.0}, {2.0, 4.0, 2.0, 4.0}, {3.0, 4.0, 0.0, 4.0}, {3.0, 4.0, 1.0, 4.0}, {3.0, 4.0, 2.0, 4.0}, {4.0, 4.0, 0.0, 4.0}, {4.0, 4.0, 1.0, 4.0}, {4.0, 4.0, 2.0, 4.0}, {0.0, 5.0, 0.0, 5.0}, {0.0, 5.0, 1.0, 5.0}, {0.0, 5.0, 2.0, 5.0}, {1.0, 5.0, 0.0, 5.0}, {1.0, 5.0, 1.0, 5.0}, {1.0, 5.0, 2.0, 5.0}, {2.0, 5.0, 0.0, 5.0}, {2.0, 5.0, 1.0, 5.0}, {2.0, 5.0, 2.0, 5.0}, {3.0, 5.0, 0.0, 5.0}, {3.0, 5.0, 1.0, 5.0}, {3.0, 5.0, 2.0, 5.0}, {4.0, 5.0, 0.0, 5.0}, {4.0, 5.0, 1.0, 5.0}, {4.0, 5.0, 2.0, 5.0}, {0.0, 6.0, 0.0, 6.0}, {0.0, 6.0, 1.0, 6.0}, {0.0, 6.0, 2.0, 6.0}, {1.0, 6.0, 0.0, 6.0}, {1.0, 6.0, 1.0, 6.0}, {1.0, 6.0, 2.0, 6.0}, {2.0, 6.0, 0.0, 6.0}, {2.0, 6.0, 1.0, 6.0}, {2.0, 6.0, 2.0, 6.0}, {3.0, 6.0, 0.0, 6.0}, {3.0, 6.0, 1.0, 6.0}, {3.0, 6.0, 2.0, 6.0}, {4.0, 6.0, 0.0, 6.0}, {4.0, 6.0, 1.0, 6.0}, {4.0, 6.0, 2.0, 6.0}, {0.0, 7.0, 0.0, 7.0}, {0.0, 7.0, 1.0, 7.0}, {0.0, 7.0, 2.0, 7.0}, {2.0, 7.0, 0.0, 7.0}, {2.0, 7.0, 1.0, 7.0}, {2.0, 7.0, 2.0, 7.0}, {3.0, 7.0, 0.0, 7.0}, {3.0, 7.0, 1.0, 7.0}, {3.0, 7.0, 2.0, 7.0}, {0.0, 8.0, 0.0, 8.0}, {0.0, 8.0, 1.0, 8.0}, {0.0, 8.0, 2.0, 8.0}, {1.0, 8.0, 0.0, 8.0}, {1.0, 8.0, 1.0, 8.0}, {1.0, 8.0, 2.0, 8.0}, {2.0, 8.0, 0.0, 8.0}, {2.0, 8.0, 1.0, 8.0}, {2.0, 8.0, 2.0, 8.0}, {3.0, 8.0, 0.0, 8.0}, {3.0, 8.0, 1.0, 8.0}, {3.0, 8.0, 2.0, 8.0}, {4.0, 8.0, 0.0, 8.0}, {4.0, 8.0, 1.0, 8.0}, {4.0, 8.0, 2.0, 8.0}, {0.0, 9.0, 0.0, 9.0}, {0.0, 9.0, 1.0, 9.0}, {0.0, 9.0, 2.0, 9.0}, {1.0, 9.0, 0.0, 9.0}, {1.0, 9.0, 1.0, 9.0}, {1.0, 9.0, 2.0, 9.0}, {2.0, 9.0, 0.0, 9.0}, {2.0, 9.0, 1.0, 9.0}, {2.0, 9.0, 2.0, 9.0}, {3.0, 9.0, 0.0, 9.0}, {3.0, 9.0, 1.0, 9.0}, {3.0, 9.0, 2.0, 9.0}, {4.0, 9.0, 0.0, 9.0}, {4.0, 9.0, 1.0, 9.0}, {4.0, 9.0, 2.0, 9.0}, {0.0, 10.0, 0.0, 10.0}, {0.0, 10.0, 1.0, 10.0}, {0.0, 10.0, 2.0, 10.0}, {1.0, 10.0, 0.0, 10.0}, {1.0, 10.0, 1.0, 10.0}, {1.0, 10.0, 2.0, 10.0}, {2.0, 10.0, 0.0, 10.0}, {2.0, 10.0, 1.0, 10.0}, {2.0, 10.0, 2.0, 10.0}, {3.0, 10.0, 0.0, 10.0}, {3.0, 10.0, 1.0, 10.0}, {3.0, 10.0, 2.0, 10.0}, {4.0, 10.0, 0.0, 10.0}, {4.0, 10.0, 1.0, 10.0}, {4.0, 10.0, 2.0, 10.0}, {0.0, 11.0, 0.0, 11.0}, {0.0, 11.0, 1.0, 11.0}, {0.0, 11.0, 2.0, 11.0}, {1.0, 11.0, 0.0, 11.0}, {1.0, 11.0, 1.0, 11.0}, {1.0, 11.0, 2.0, 11.0}, {2.0, 11.0, 0.0, 11.0}, {2.0, 11.0, 1.0, 11.0}, {2.0, 11.0, 2.0, 11.0}, {3.0, 11.0, 0.0, 11.0}, {3.0, 11.0, 1.0, 11.0}, {3.0, 11.0, 2.0, 11.0}, {4.0, 11.0, 0.0, 11.0}, {4.0, 11.0, 1.0, 11.0}, {4.0, 11.0, 2.0, 11.0}, {0.0, 12.0, 0.0, 12.0}, {0.0, 12.0, 1.0, 12.0}, {0.0, 12.0, 2.0, 12.0}, {1.0, 12.0, 0.0, 12.0}, {1.0, 12.0, 1.0, 12.0}, {1.0, 12.0, 2.0, 12.0}, {2.0, 12.0, 0.0, 12.0}, {2.0, 12.0, 1.0, 12.0}, {2.0, 12.0, 2.0, 12.0}, {3.0, 12.0, 0.0, 12.0}, {3.0, 12.0, 1.0, 12.0}, {3.0, 12.0, 2.0, 12.0}, {4.0, 12.0, 0.0, 12.0}, {4.0, 12.0, 1.0, 12.0}, {4.0, 12.0, 2.0, 12.0}, {0.0, 13.0, 0.0, 13.0}, {0.0, 13.0, 1.0, 13.0}, {0.0, 13.0, 2.0, 13.0}, {1.0, 13.0, 0.0, 13.0}, {1.0, 13.0, 1.0, 13.0}, {1.0, 13.0, 2.0, 13.0}, {2.0, 13.0, 0.0, 13.0}, {2.0, 13.0, 1.0, 13.0}, {2.0, 13.0, 2.0, 13.0}, {3.0, 13.0, 0.0, 13.0}, {3.0, 13.0, 1.0, 13.0}, {3.0, 13.0, 2.0, 13.0}, {4.0, 13.0, 0.0, 13.0}, {4.0, 13.0, 1.0, 13.0}, {4.0, 13.0, 2.0, 13.0}, {0.0, 14.0, 0.0, 14.0}, {0.0, 14.0, 1.0, 14.0}, {0.0, 14.0, 2.0, 14.0}, {1.0, 14.0, 0.0, 14.0}, {1.0, 14.0, 1.0, 14.0}, {1.0, 14.0, 2.0, 14.0}, {2.0, 14.0, 0.0, 14.0}, {2.0, 14.0, 1.0, 14.0}, {2.0, 14.0, 2.0, 14.0}, {3.0, 14.0, 0.0, 14.0}, {3.0, 14.0, 1.0, 14.0}, {3.0, 14.0, 2.0, 14.0}, {4.0, 14.0, 0.0, 14.0}, {4.0, 14.0, 1.0, 14.0}, {4.0, 14.0, 2.0, 14.0}, {0.0, 15.0, 0.0, 15.0}, {0.0, 15.0, 1.0, 15.0}, {0.0, 15.0, 2.0, 15.0}, {1.0, 15.0, 0.0, 15.0}, {1.0, 15.0, 1.0, 15.0}, {1.0, 15.0, 2.0, 15.0}, {2.0, 15.0, 0.0, 15.0}, {2.0, 15.0, 1.0, 15.0}, {2.0, 15.0, 2.0, 15.0}, {3.0, 15.0, 0.0, 15.0}, {3.0, 15.0, 1.0, 15.0}, {3.0, 15.0, 2.0, 15.0}, {4.0, 15.0, 0.0, 15.0}, {4.0, 15.0, 1.0, 15.0}, {4.0, 15.0, 2.0, 15.0}, {0.0, 16.0, 0.0, 16.0}, {0.0, 16.0, 1.0, 16.0}, {0.0, 16.0, 2.0, 16.0}, {1.0, 16.0, 0.0, 16.0}, {1.0, 16.0, 1.0, 16.0}, {1.0, 16.0, 2.0, 16.0}, {2.0, 16.0, 0.0, 16.0}, {2.0, 16.0, 1.0, 16.0}, {2.0, 16.0, 2.0, 16.0}, {3.0, 16.0, 0.0, 16.0}, {3.0, 16.0, 1.0, 16.0}, {3.0, 16.0, 2.0, 16.0}, {4.0, 16.0, 0.0, 16.0}, {4.0, 16.0, 1.0, 16.0}, {4.0, 16.0, 2.0, 16.0}, {0.0, 17.0, 0.0, 17.0}, {0.0, 17.0, 1.0, 17.0}, {0.0, 17.0, 2.0, 17.0}, {1.0, 17.0, 0.0, 17.0}, {1.0, 17.0, 1.0, 17.0}, {1.0, 17.0, 2.0, 17.0}, {2.0, 17.0, 0.0, 17.0}, {2.0, 17.0, 1.0, 17.0}, {2.0, 17.0, 2.0, 17.0}, {3.0, 17.0, 0.0, 17.0}, {3.0, 17.0, 1.0, 17.0}, {3.0, 17.0, 2.0, 17.0}, {4.0, 17.0, 0.0, 17.0}, {4.0, 17.0, 1.0, 17.0}, {4.0, 17.0, 2.0, 17.0}, {0.0, 18.0, 0.0, 18.0}, {0.0, 18.0, 1.0, 18.0}, {0.0, 18.0, 2.0, 18.0}, {1.0, 18.0, 0.0, 18.0}, {1.0, 18.0, 1.0, 18.0}, {1.0, 18.0, 2.0, 18.0}, {2.0, 18.0, 0.0, 18.0}, {2.0, 18.0, 1.0, 18.0}, {2.0, 18.0, 2.0, 18.0}, {3.0, 18.0, 0.0, 18.0}, {3.0, 18.0, 1.0, 18.0}, {3.0, 18.0, 2.0, 18.0}, {4.0, 18.0, 0.0, 18.0}, {4.0, 18.0, 1.0, 18.0}, {4.0, 18.0, 2.0, 18.0}, {0.0, 19.0, 0.0, 19.0}, {0.0, 19.0, 1.0, 19.0}, {0.0, 19.0, 2.0, 19.0}, {1.0, 19.0, 0.0, 19.0}, {1.0, 19.0, 1.0, 19.0}, {1.0, 19.0, 2.0, 19.0}, {2.0, 19.0, 0.0, 19.0}, {2.0, 19.0, 1.0, 19.0}, {2.0, 19.0, 2.0, 19.0}, {3.0, 19.0, 0.0, 19.0}, {3.0, 19.0, 1.0, 19.0}, {3.0, 19.0, 2.0, 19.0}, {4.0, 19.0, 0.0, 19.0}, {4.0, 19.0, 1.0, 19.0}, {4.0, 19.0, 2.0, 19.0}, {0.0, 20.0, 0.0, 20.0}, {0.0, 20.0, 1.0, 20.0}, {0.0, 20.0, 2.0, 20.0}, {1.0, 20.0, 0.0, 20.0}, {1.0, 20.0, 1.0, 20.0}, {1.0, 20.0, 2.0, 20.0}, {2.0, 20.0, 0.0, 20.0}, {2.0, 20.0, 1.0, 20.0}, {2.0, 20.0, 2.0, 20.0}, {3.0, 20.0, 0.0, 20.0}, {3.0, 20.0, 1.0, 20.0}, {3.0, 20.0, 2.0, 20.0}, {4.0, 20.0, 0.0, 20.0}, {4.0, 20.0, 1.0, 20.0}, {4.0, 20.0, 2.0, 20.0}, {0.0, 21.0, 0.0, 21.0}, {0.0, 21.0, 1.0, 21.0}, {0.0, 21.0, 2.0, 21.0}, {1.0, 21.0, 0.0, 21.0}, {1.0, 21.0, 1.0, 21.0}, {1.0, 21.0, 2.0, 21.0}, {2.0, 21.0, 0.0, 21.0}, {2.0, 21.0, 1.0, 21.0}, {2.0, 21.0, 2.0, 21.0}, {3.0, 21.0, 0.0, 21.0}, {3.0, 21.0, 1.0, 21.0}, {3.0, 21.0, 2.0, 21.0}, {4.0, 21.0, 0.0, 21.0}, {4.0, 21.0, 1.0, 21.0}, {4.0, 21.0, 2.0, 21.0}, {0.0, 22.0, 0.0, 22.0}, {0.0, 22.0, 1.0, 22.0}, {0.0, 22.0, 2.0, 22.0}, {1.0, 22.0, 0.0, 22.0}, {1.0, 22.0, 1.0, 22.0}, {1.0, 22.0, 2.0, 22.0}, {2.0, 22.0, 0.0, 22.0}, {2.0, 22.0, 1.0, 22.0}, {2.0, 22.0, 2.0, 22.0}, {3.0, 22.0, 0.0, 22.0}, {3.0, 22.0, 1.0, 22.0}, {3.0, 22.0, 2.0, 22.0}, {4.0, 22.0, 0.0, 22.0}, {4.0, 22.0, 1.0, 22.0}, {4.0, 22.0, 2.0, 22.0}, {0.0, 23.0, 0.0, 23.0}, {0.0, 23.0, 1.0, 23.0}, {0.0, 23.0, 2.0, 23.0}, {1.0, 23.0, 0.0, 23.0}, {1.0, 23.0, 1.0, 23.0}, {1.0, 23.0, 2.0, 23.0}, {2.0, 23.0, 0.0, 23.0}, {2.0, 23.0, 1.0, 23.0}, {2.0, 23.0, 2.0, 23.0}, {3.0, 23.0, 0.0, 23.0}, {3.0, 23.0, 1.0, 23.0}, {3.0, 23.0, 2.0, 23.0}, {4.0, 23.0, 0.0, 23.0}, {4.0, 23.0, 1.0, 23.0}, {4.0, 23.0, 2.0, 23.0}, {0.0, 24.0, 0.0, 24.0}, {0.0, 24.0, 1.0, 24.0}, {0.0, 24.0, 2.0, 24.0}, {1.0, 24.0, 0.0, 24.0}, {1.0, 24.0, 1.0, 24.0}, {1.0, 24.0, 2.0, 24.0}, {2.0, 24.0, 0.0, 24.0}, {2.0, 24.0, 1.0, 24.0}, {2.0, 24.0, 2.0, 24.0}, {3.0, 24.0, 0.0, 24.0}, {3.0, 24.0, 1.0, 24.0}, {3.0, 24.0, 2.0, 24.0}, {4.0, 24.0, 0.0, 24.0}, {4.0, 24.0, 1.0, 24.0}, {4.0, 24.0, 2.0, 24.0}, {0.0, 25.0, 0.0, 25.0}, {0.0, 25.0, 1.0, 25.0}, {0.0, 25.0, 2.0, 25.0}, {1.0, 25.0, 0.0, 25.0}, {1.0, 25.0, 1.0, 25.0}, {1.0, 25.0, 2.0, 25.0}, {2.0, 25.0, 0.0, 25.0}, {2.0, 25.0, 1.0, 25.0}, {2.0, 25.0, 2.0, 25.0}, {3.0, 25.0, 0.0, 25.0}, {3.0, 25.0, 1.0, 25.0}, {3.0, 25.0, 2.0, 25.0}, {4.0, 25.0, 0.0, 25.0}, {4.0, 25.0, 1.0, 25.0}, {4.0, 25.0, 2.0, 25.0}, {0.0, 26.0, 0.0, 26.0}, {0.0, 26.0, 1.0, 26.0}, {0.0, 26.0, 2.0, 26.0}, {1.0, 26.0, 0.0, 26.0}, {1.0, 26.0, 1.0, 26.0}, {1.0, 26.0, 2.0, 26.0}, {2.0, 26.0, 0.0, 26.0}, {2.0, 26.0, 1.0, 26.0}, {2.0, 26.0, 2.0, 26.0}, {3.0, 26.0, 0.0, 26.0}, {3.0, 26.0, 1.0, 26.0}, {3.0, 26.0, 2.0, 26.0}, {4.0, 26.0, 0.0, 26.0}, {4.0, 26.0, 1.0, 26.0}, {4.0, 26.0, 2.0, 26.0}, {0.0, 27.0, 0.0, 27.0}, {0.0, 27.0, 1.0, 27.0}, {0.0, 27.0, 2.0, 27.0}, {1.0, 27.0, 0.0, 27.0}, {1.0, 27.0, 1.0, 27.0}, {1.0, 27.0, 2.0, 27.0}, {2.0, 27.0, 0.0, 27.0}, {2.0, 27.0, 1.0, 27.0}, {2.0, 27.0, 2.0, 27.0}, {3.0, 27.0, 0.0, 27.0}, {3.0, 27.0, 1.0, 27.0}, {3.0, 27.0, 2.0, 27.0}, {4.0, 27.0, 0.0, 27.0}, {4.0, 27.0, 1.0, 27.0}, {4.0, 27.0, 2.0, 27.0}, {0.0, 28.0, 0.0, 28.0}, {0.0, 28.0, 1.0, 28.0}, {0.0, 28.0, 2.0, 28.0}, {1.0, 28.0, 0.0, 28.0}, {1.0, 28.0, 1.0, 28.0}, {1.0, 28.0, 2.0, 28.0}, {2.0, 28.0, 0.0, 28.0}, {2.0, 28.0, 1.0, 28.0}, {2.0, 28.0, 2.0, 28.0}, {3.0, 28.0, 0.0, 28.0}, {3.0, 28.0, 1.0, 28.0}, {3.0, 28.0, 2.0, 28.0}, {4.0, 28.0, 0.0, 28.0}, {4.0, 28.0, 1.0, 28.0}, {4.0, 28.0, 2.0, 28.0}, {0.0, 29.0, 0.0, 29.0}, {0.0, 29.0, 1.0, 29.0}, {0.0, 29.0, 2.0, 29.0}, {1.0, 29.0, 0.0, 29.0}, {1.0, 29.0, 1.0, 29.0}, {1.0, 29.0, 2.0, 29.0}, {2.0, 29.0, 0.0, 29.0}, {2.0, 29.0, 1.0, 29.0}, {2.0, 29.0, 2.0, 29.0}, {3.0, 29.0, 0.0, 29.0}, {3.0, 29.0, 1.0, 29.0}, {3.0, 29.0, 2.0, 29.0}, {0.0, 30.0, 0.0, 30.0}, {0.0, 30.0, 1.0, 30.0}, {0.0, 30.0, 2.0, 30.0}, {1.0, 30.0, 0.0, 30.0}, {1.0, 30.0, 1.0, 30.0}, {1.0, 30.0, 2.0, 30.0}, {2.0, 30.0, 0.0, 30.0}, {2.0, 30.0, 1.0, 30.0}, {2.0, 30.0, 2.0, 30.0}, {3.0, 30.0, 0.0, 30.0}, {3.0, 30.0, 1.0, 30.0}, {3.0, 30.0, 2.0, 30.0}, {4.0, 30.0, 0.0, 30.0}, {4.0, 30.0, 1.0, 30.0}, {4.0, 30.0, 2.0, 30.0}, {0.0, 31.0, 0.0, 31.0}, {0.0, 31.0, 1.0, 31.0}, {0.0, 31.0, 2.0, 31.0}, {1.0, 31.0, 0.0, 31.0}, {1.0, 31.0, 1.0, 31.0}, {1.0, 31.0, 2.0, 31.0}, {2.0, 31.0, 0.0, 31.0}, {2.0, 31.0, 1.0, 31.0}, {2.0, 31.0, 2.0, 31.0}, {3.0, 31.0, 0.0, 31.0}, {3.0, 31.0, 1.0, 31.0}, {3.0, 31.0, 2.0, 31.0}, {4.0, 31.0, 0.0, 31.0}, {4.0, 31.0, 1.0, 31.0}, {4.0, 31.0, 2.0, 31.0}, {0.0, 32.0, 0.0, 32.0}, {0.0, 32.0, 1.0, 32.0}, {0.0, 32.0, 2.0, 32.0}, {1.0, 32.0, 0.0, 32.0}, {1.0, 32.0, 1.0, 32.0}, {1.0, 32.0, 2.0, 32.0}, {2.0, 32.0, 0.0, 32.0}, {2.0, 32.0, 1.0, 32.0}, {2.0, 32.0, 2.0, 32.0}, {3.0, 32.0, 0.0, 32.0}, {3.0, 32.0, 1.0, 32.0}, {3.0, 32.0, 2.0, 32.0}, {4.0, 32.0, 0.0, 32.0}, {4.0, 32.0, 1.0, 32.0}, {4.0, 32.0, 2.0, 32.0}, {0.0, 33.0, 0.0, 33.0}, {0.0, 33.0, 1.0, 33.0}, {0.0, 33.0, 2.0, 33.0}, {1.0, 33.0, 0.0, 33.0}, {1.0, 33.0, 1.0, 33.0}, {1.0, 33.0, 2.0, 33.0}, {2.0, 33.0, 0.0, 33.0}, {2.0, 33.0, 1.0, 33.0}, {2.0, 33.0, 2.0, 33.0}, {3.0, 33.0, 0.0, 33.0}, {3.0, 33.0, 1.0, 33.0}, {3.0, 33.0, 2.0, 33.0}, {4.0, 33.0, 0.0, 33.0}, {4.0, 33.0, 1.0, 33.0}, {4.0, 33.0, 2.0, 33.0}, {0.0, 34.0, 0.0, 34.0}, {0.0, 34.0, 1.0, 34.0}, {0.0, 34.0, 2.0, 34.0}, {1.0, 34.0, 0.0, 34.0}, {1.0, 34.0, 1.0, 34.0}, {1.0, 34.0, 2.0, 34.0}, {2.0, 34.0, 0.0, 34.0}, {2.0, 34.0, 1.0, 34.0}, {2.0, 34.0, 2.0, 34.0}, {3.0, 34.0, 0.0, 34.0}, {3.0, 34.0, 1.0, 34.0}, {3.0, 34.0, 2.0, 34.0}, {4.0, 34.0, 0.0, 34.0}, {4.0, 34.0, 1.0, 34.0}, {4.0, 34.0, 2.0, 34.0}, {1.0, 35.0, 0.0, 35.0}, {1.0, 35.0, 1.0, 35.0}, {1.0, 35.0, 2.0, 35.0}, {2.0, 35.0, 0.0, 35.0}, {2.0, 35.0, 1.0, 35.0}, {2.0, 35.0, 2.0, 35.0}, {3.0, 35.0, 0.0, 35.0}, {3.0, 35.0, 1.0, 35.0}, {3.0, 35.0, 2.0, 35.0}, {4.0, 35.0, 0.0, 35.0}, {4.0, 35.0, 1.0, 35.0}, {4.0, 35.0, 2.0, 35.0}, {0.0, 36.0, 0.0, 36.0}, {0.0, 36.0, 1.0, 36.0}, {0.0, 36.0, 2.0, 36.0}, {1.0, 36.0, 0.0, 36.0}, {1.0, 36.0, 1.0, 36.0}, {1.0, 36.0, 2.0, 36.0}, {2.0, 36.0, 0.0, 36.0}, {2.0, 36.0, 1.0, 36.0}, {2.0, 36.0, 2.0, 36.0}, {3.0, 36.0, 0.0, 36.0}, {3.0, 36.0, 1.0, 36.0}, {3.0, 36.0, 2.0, 36.0}, {4.0, 36.0, 0.0, 36.0}, {4.0, 36.0, 1.0, 36.0}, {4.0, 36.0, 2.0, 36.0}, {0.0, 37.0, 0.0, 37.0}, {0.0, 37.0, 1.0, 37.0}, {0.0, 37.0, 2.0, 37.0}, {1.0, 37.0, 0.0, 37.0}, {1.0, 37.0, 1.0, 37.0}, {1.0, 37.0, 2.0, 37.0}, {2.0, 37.0, 0.0, 37.0}, {2.0, 37.0, 1.0, 37.0}, {2.0, 37.0, 2.0, 37.0}, {3.0, 37.0, 0.0, 37.0}, {3.0, 37.0, 1.0, 37.0}, {3.0, 37.0, 2.0, 37.0}, {4.0, 37.0, 0.0, 37.0}, {4.0, 37.0, 1.0, 37.0}, {4.0, 37.0, 2.0, 37.0}, {0.0, 38.0, 0.0, 38.0}, {0.0, 38.0, 1.0, 38.0}, {0.0, 38.0, 2.0, 38.0}, {1.0, 38.0, 0.0, 38.0}, {1.0, 38.0, 1.0, 38.0}, {1.0, 38.0, 2.0, 38.0}, {2.0, 38.0, 0.0, 38.0}, {2.0, 38.0, 1.0, 38.0}, {2.0, 38.0, 2.0, 38.0}, {3.0, 38.0, 0.0, 38.0}, {3.0, 38.0, 1.0, 38.0}, {3.0, 38.0, 2.0, 38.0}, {4.0, 38.0, 0.0, 38.0}, {4.0, 38.0, 1.0, 38.0}, {4.0, 38.0, 2.0, 38.0}, {0.0, 39.0, 0.0, 39.0}, {0.0, 39.0, 1.0, 39.0}, {0.0, 39.0, 2.0, 39.0}, {1.0, 39.0, 0.0, 39.0}, {1.0, 39.0, 1.0, 39.0}, {1.0, 39.0, 2.0, 39.0}, {2.0, 39.0, 0.0, 39.0}, {2.0, 39.0, 1.0, 39.0}, {2.0, 39.0, 2.0, 39.0}, {3.0, 39.0, 0.0, 39.0}, {3.0, 39.0, 1.0, 39.0}, {3.0, 39.0, 2.0, 39.0}, {4.0, 39.0, 0.0, 39.0}, {4.0, 39.0, 1.0, 39.0}, {4.0, 39.0, 2.0, 39.0}, {0.0, 40.0, 0.0, 40.0}, {0.0, 40.0, 1.0, 40.0}, {0.0, 40.0, 2.0, 40.0}, {1.0, 40.0, 0.0, 40.0}, {1.0, 40.0, 1.0, 40.0}, {1.0, 40.0, 2.0, 40.0}, {2.0, 40.0, 0.0, 40.0}, {2.0, 40.0, 1.0, 40.0}, {2.0, 40.0, 2.0, 40.0}, {3.0, 40.0, 0.0, 40.0}, {3.0, 40.0, 1.0, 40.0}, {3.0, 40.0, 2.0, 40.0}, {4.0, 40.0, 0.0, 40.0}, {4.0, 40.0, 1.0, 40.0}, {4.0, 40.0, 2.0, 40.0}};
    private final double[] yVals = {2.98457, 4.713244, 0.51537, 2.672639, 4.726413, 0.619165, 2.276911, 4.778002, 0.695735, 2.051089, 5.051022, 0.727564, 1.853511, 5.41786, 0.763318, 3.038433, 4.981272, 0.527353, 2.735406, 4.987897, 0.641458, 2.356777, 5.099474, 0.693268, 2.09892, 5.266607, 0.752205, 1.899789, 5.597757, 0.770578, 3.078401, 4.870846, 0.519321, 2.692827, 4.916255, 0.621036, 2.387973, 5.203519, 0.703889, 2.146219, 5.248235, 0.742868, 1.894012, 5.543539, 0.764102, 3.078197, 4.826257, 0.525028, 2.608188, 4.813336, 0.634834, 2.355555, 5.015507, 0.700299, 2.011456, 5.143799, 0.736663, 1.860257, 5.384399, 0.754848, 3.019003, 4.671431, 0.505622, 2.630316, 4.723275, 0.621488, 2.312775, 4.853932, 0.710742, 1.963479, 4.909454, 0.722874, 1.762758, 5.193983, 0.767567, 3.002078, 4.669075, 0.498298, 2.576411, 4.652239, 0.608671, 2.330157, 5.018458, 0.697497, 1.955438, 5.048731, 0.741963, 1.748033, 5.289665, 0.802822, 2.950626, 4.755646, 0.46554, 2.527223, 4.655541, 0.630399, 2.293018, 4.896994, 0.672413, 2.088382, 5.11417, 0.740988, 1.901355, 5.544301, 0.764584, 2.817033, 4.500461, 0.428528, 2.218472, 4.781191, 0.642683, 2.035809, 5.108996, 0.703393, 2.802681, 4.286194, 0.425973, 2.38993, 4.342609, 0.550357, 2.129328, 4.65871, 0.63386, 1.860766, 4.520996, 0.688739, 1.65791, 4.841238, 0.740361, 2.555396, 4.031661, 0.470709, 2.215683, 4.102252, 0.584496, 2.064908, 4.273278, 0.645261, 1.834342, 4.514053, 0.668228, 1.735648, 4.92343, 0.704504, 2.929532, 4.647377, 0.509943, 2.544501, 4.54244, 0.629449, 2.257285, 4.777745, 0.693909, 2.025047, 4.875244, 0.724866, 1.806749, 5.33717, 0.755642, 2.915032, 4.543436, 0.531468, 2.570871, 4.530827, 0.637691, 2.210841, 4.748043, 0.691748, 2.093233, 5.189792, 0.741355, 1.943321, 5.483784, 0.782656, 3.002305, 4.699363, 0.521065, 2.610815, 4.701883, 0.622986, 2.31642, 4.968901, 0.704641, 2.059542, 5.096537, 0.733736, 1.914456, 5.50995, 0.754264, 2.768402, 4.416099, 0.523072, 2.441626, 4.465103, 0.63755, 2.13377, 4.526309, 0.701343, 1.974417, 4.782442, 0.748198, 1.798079, 5.147619, 0.780341, 2.800885, 4.402659, 0.481514, 2.414435, 4.457132, 0.612175, 2.21526, 4.580229, 0.690907, 1.832537, 4.554512, 0.742369, 1.606119, 4.649702, 0.773787, 3.028602, 4.816155, 0.50642, 2.657628, 4.851146, 0.614149, 2.277677, 4.937471, 0.676855, 2.110459, 5.29977, 0.730008, 1.95083, 5.758292, 0.852693, 2.996424, 5.04417, 0.52772, 2.644958, 4.868127, 0.706522, 2.335498, 5.395945, 0.694076, 2.157527, 5.790227, 0.76813, 2.013564, 5.980438, 0.875199, 3.111872, 5.127971, 0.581929, 2.648976, 5.161266, 0.681883, 2.347779, 5.340635, 0.752099, 2.048969, 5.425215, 0.797764, 1.801338, 5.907661, 0.815787, 2.932273, 4.964714, 0.592637, 2.512843, 5.090017, 0.681853, 2.187923, 5.240804, 0.738716, 1.943832, 5.696484, 0.7739, 1.785262, 6.078894, 0.793904, 3.031857, 4.987638, 0.566376, 2.49774, 4.870252, 0.654172, 2.394212, 5.318519, 0.739596, 1.789057, 5.030251, 0.75419, 1.579726, 5.115295, 0.794779, 3.084718, 5.396409, 0.596732, 2.653903, 5.462485, 0.69286, 2.258569, 5.478561, 0.745979, 2.027043, 5.91703, 0.787702, 1.816191, 6.252056, 0.804141, 3.180178, 5.267186, 0.591284, 2.58863, 5.314602, 0.693193, 2.31809, 5.538732, 0.741131, 2.009689, 5.655542, 0.791268, 1.761238, 5.921823, 0.814366, 3.197911, 5.365867, 0.613173, 2.78195, 5.440799, 0.693382, 2.427728, 5.670367, 0.744979, 2.20911, 6.142632, 0.790445, 2.036397, 6.609304, 0.819312, 3.241131, 5.509817, 0.609203, 2.768614, 5.586125, 0.711146, 2.314865, 5.904491, 0.756591, 2.134801, 6.195968, 0.780249, 1.926923, 6.720075, 0.82664, 3.129127, 5.509512, 0.600424, 2.711169, 5.558107, 0.692722, 2.347548, 5.756781, 0.748231, 2.072829, 6.08498, 0.776273, 1.95689, 6.644052, 0.821412, 3.187928, 5.259362, 0.60462, 2.766437, 5.274743, 0.704957, 2.440502, 5.624713, 0.743501, 2.162925, 5.927681, 0.784116, 1.896028, 6.574702, 0.819337, 3.182382, 5.308609, 0.594792, 2.741102, 5.421174, 0.692157, 2.42462, 5.698812, 0.744645, 2.091536, 5.970766, 0.788941, 1.91414, 6.513009, 0.805593, 3.125027, 5.261152, 0.570023, 2.582312, 5.324587, 0.663944, 2.268823, 5.619221, 0.768832, 1.988267, 5.721336, 0.795135, 1.812634, 6.026099, 0.808924, 2.950721, 4.929043, 0.528429, 2.563084, 4.720846, 0.666281, 2.222246, 5.052502, 0.726275, 2.02545, 5.35103, 0.765292, 1.828829, 5.591631, 0.813206, 2.975133, 4.893283, 0.547942, 2.591866, 4.970197, 0.636662, 2.282481, 5.174865, 0.719973, 2.103347, 5.570114, 0.762957, 2.902325, 4.779456, 0.555377, 2.567382, 4.839338, 0.642077, 2.282247, 4.982483, 0.716769, 1.961622, 5.268977, 0.739514, 1.790885, 5.589955, 0.763268, 3.104613, 4.817528, 0.538987, 2.761961, 5.02948, 0.646012, 2.360944, 5.211989, 0.713592, 2.334512, 5.637008, 0.760982, 2.133153, 6.148561, 0.787998, 2.999354, 4.718838, 0.521481, 2.668003, 4.830625, 0.632442, 2.375163, 5.052726, 0.705782, 2.116127, 5.128111, 0.748825, 1.879205, 5.570749, 0.773697, 2.873719, 4.517873, 0.546929, 2.506363, 4.617843, 0.668231, 2.252315, 4.746284, 0.731454, 2.051561, 5.028981, 0.782896, 1.919447, 5.372865, 0.80897, 2.995285, 4.610403, 0.539941, 2.606807, 4.689027, 0.643822, 2.365126, 4.853768, 0.724104, 2.089043, 5.14016, 0.755978, 1.928988, 5.644448, 0.78093, 2.540131, 4.741571, 0.646216, 2.211021, 4.696073, 0.711069, 2.037117, 4.878206, 0.751934, 1.901587, 5.157143, 0.877044, 2.955732, 4.656176, 0.526297, 2.605435, 4.646853, 0.63675, 2.317814, 4.908614, 0.715693, 2.025524, 5.015633, 0.747758, 1.840073, 5.398271, 0.775128, 3.16587, 4.990445, 0.569069, 2.975197, 5.390773, 0.677092, 2.372712, 5.218254, 0.738185, 2.592194, 6.354003, 0.797322, 2.474716, 7.095062, 0.811023, 3.058037, 4.732387, 0.536407, 2.669148, 4.969276, 0.650269, 2.329577, 4.991816, 0.719014, 2.198531, 5.413656, 0.749115, 2.020852, 5.87501, 0.774221, 3.157274, 4.863082, 0.517006, 2.664422, 4.855702, 0.622826, 2.417804, 5.173883, 0.697796, 2.173988, 5.31994, 0.723718, 2.042157, 5.737954, 0.76047, 3.014416, 4.793736, 0.526066, 2.616434, 4.851592, 0.627973, 2.323677, 5.0018, 0.715022, 2.047229, 5.302126, 0.743492, 1.852569, 5.4888, 0.781323};
    private final double[] errVals = {0.039921, 0.102811, 0.00674, 0.03389, 0.051759, 0.00818, 0.024362, 0.042812, 0.0099, 0.0298, 0.05049, 0.008486, 0.03397, 0.056956, 0.009744, 0.031414, 0.072678, 0.006108, 0.020873, 0.081378, 0.007477, 0.023803, 0.031392, 0.0085, 0.019183, 0.029472, 0.007991, 0.048562, 0.1024, 0.010344, 0.058321, 0.065437, 0.006226, 0.020037, 0.102146, 0.007433, 0.019532, 0.105184, 0.0084, 0.012729, 0.079472, 0.007855, 0.03205, 0.065788, 0.008885, 0.031821, 0.061285, 0.00657, 0.023162, 0.034099, 0.007443, 0.020916, 0.049854, 0.0091, 0.010071, 0.057441, 0.00831, 0.030994, 0.10447, 0.010414, 0.049818, 0.072092, 0.006001, 0.012698, 0.071784, 0.007697, 0.035069, 0.057846, 0.0083, 0.009279, 0.131949, 0.008047, 0.03474, 0.094105, 0.00997, 0.041699, 0.067046, 0.006022, 0.012664, 0.043964, 0.007207, 0.018197, 0.049702, 0.0076, 0.041259, 0.022326, 0.007954, 0.03321, 0.106574, 0.010008, 0.019638, 0.060738, 0.006053, 0.006512, 0.015036, 0.007444, 0.020153, 0.035259, 0.0071, 0.011496, 0.013897, 0.007569, 0.009658, 0.006526, 0.008093, 0.026807, 0.033781, 0.004973, 0.014026, 0.033462, 0.006, 0.006491, 0.015305, 0.006747, 0.03018, 0.041097, 0.005731, 0.013879, 0.037063, 0.006525, 0.018976, 0.039196, 0.007, 0.009188, 0.027053, 0.006506, 0.019292, 0.035224, 0.007316, 0.026597, 0.038462, 0.004719, 0.018306, 0.072192, 0.00633, 0.055549, 0.098271, 0.0064, 0.021359, 0.104237, 0.006439, 0.024344, 0.114332, 0.005878, 0.03738, 0.09382, 0.005168, 0.025574, 0.088777, 0.006745, 0.039893, 0.155981, 0.007, 0.043285, 0.088679, 0.007021, 0.012672, 0.13009, 0.007116, 0.050785, 0.054201, 0.005847, 0.015103, 0.077114, 0.007077, 0.030686, 0.023231, 0.0083, 0.038115, 0.105269, 0.007422, 0.060625, 0.084117, 0.00901, 0.020552, 0.036356, 0.005294, 0.025596, 0.044079, 0.006904, 0.061444, 0.094676, 0.0069, 0.039496, 0.086594, 0.007227, 0.022725, 0.020878, 0.007634, 0.047094, 0.048485, 0.006386, 0.050341, 0.081245, 0.006963, 0.024507, 0.019541, 0.0084, 0.032463, 0.050829, 0.007834, 0.021887, 0.079138, 0.009142, 0.018116, 0.034141, 0.00514, 0.008794, 0.016723, 0.00818, 0.040866, 0.046899, 0.0063, 0.010816, 0.017809, 0.007296, 0.015353, 0.005888, 0.007917, 0.024979, 0.057772, 0.005171, 0.010494, 0.014477, 0.00654, 0.016262, 0.020256, 0.0059, 0.016286, 0.013401, 0.007148, 0.010427, 0.006426, 0.008326, 0.030797, 0.035333, 0.00531, 0.019254, 0.110116, 0.007457, 0.056, 0.171469, 0.0059, 0.040126, 0.130731, 0.006586, 0.012377, 0.157743, 0.006996, 0.039165, 0.055373, 0.005763, 0.029935, 0.075422, 0.006286, 0.029605, 0.045835, 0.0071, 0.018397, 0.078777, 0.007005, 0.046158, 0.131959, 0.007055, 0.032936, 0.064766, 0.004377, 0.017352, 0.101994, 0.005937, 0.048618, 0.052214, 0.006, 0.017983, 0.015589, 0.006099, 0.020917, 0.158875, 0.006845, 0.047509, 0.061801, 0.005529, 0.013465, 0.158192, 0.00735, 0.061236, 0.166774, 0.0066, 0.027947, 0.099665, 0.006672, 0.022581, 0.21358, 0.007753, 0.037528, 0.07576, 0.005621, 0.041989, 0.07096, 0.007367, 0.108248, 0.169825, 0.0067, 0.036825, 0.066859, 0.006973, 0.024749, 0.202255, 0.008067, 0.019203, 0.070658, 0.005236, 0.032564, 0.097035, 0.007016, 0.060405, 0.234513, 0.0063, 0.043536, 0.035962, 0.006491, 0.024068, 0.205857, 0.007264, 0.023371, 0.053895, 0.004405, 0.038433, 0.058126, 0.006865, 0.067051, 0.101162, 0.0068, 0.01921, 0.018162, 0.006946, 0.040958, 0.138487, 0.006909, 0.039348, 0.041233, 0.005032, 0.042986, 0.041239, 0.00676, 0.061249, 0.0897, 0.0067, 0.014179, 0.063018, 0.00764, 0.047715, 0.149362, 0.007699, 0.051109, 0.105955, 0.005847, 0.037522, 0.060188, 0.006475, 0.026778, 0.185553, 0.0064, 0.0419, 0.130397, 0.007225, 0.04669, 0.093069, 0.006085, 0.048738, 0.048639, 0.005338, 0.013539, 0.140545, 0.006361, 0.059345, 0.150215, 0.0066, 0.015559, 0.145161, 0.007064, 0.03552, 0.167497, 0.006594, 0.023713, 0.071057, 0.004989, 0.047122, 0.100619, 0.005836, 0.017963, 0.033981, 0.0064, 0.020206, 0.017334, 0.007033, 0.032537, 0.200915, 0.008065, 0.042537, 0.084436, 0.004926, 0.017168, 0.041022, 0.005874, 0.048707, 0.142841, 0.0057, 0.012491, 0.017883, 0.006706, 0.013551, 0.023571, 0.005921, 0.028378, 0.045274, 0.006289, 0.033857, 0.073638, 0.007451, 0.018745, 0.068093, 0.0071, 0.047424, 0.106436, 0.007498, 0.028595, 0.026126, 0.008162, 0.028583, 0.044656, 0.006287, 0.007341, 0.016538, 0.006514, 0.014824, 0.032382, 0.0069, 0.005715, 0.015367, 0.007994, 0.020813, 0.085037, 0.006031, 0.031472, 0.175801, 0.006914, 0.019996, 0.110406, 0.0085, 0.02137, 0.088651, 0.00698, 0.018216, 0.106073, 0.00787, 0.033651, 0.061687, 0.006026, 0.016415, 0.083041, 0.006546, 0.022762, 0.08619, 0.0084, 0.038575, 0.061199, 0.007794, 0.019948, 0.030464, 0.009308, 0.024687, 0.046369, 0.005878, 0.009294, 0.095489, 0.006297, 0.022938, 0.028314, 0.0079, 0.016583, 0.059498, 0.006976, 0.017711, 0.031096, 0.008241, 0.042389, 0.065538, 0.004405, 0.046512, 0.078528, 0.006865, 0.017494, 0.022002, 0.0077, 0.013469, 0.038771, 0.006765, 0.022088, 0.044258, 0.007275, 0.047187, 0.062406, 0.007137, 0.020879, 0.058443, 0.007643, 0.039194, 0.077023, 0.0083, 0.017165, 0.087503, 0.008188, 0.03871, 0.10582, 0.010335, 0.005917, 0.011788, 0.006413, 0.014201, 0.023246, 0.0059, 0.010589, 0.015823, 0.006784, 0.007663, 0.00534, 0.007092, 0.050714, 0.044409, 0.007301, 0.033987, 0.062188, 0.007991, 0.02849, 0.060903, 0.0089, 0.018026, 0.04801, 0.007861, 0.031208, 0.019367, 0.009205, 0.049552, 0.065909, 0.006772, 0.020438, 0.103052, 0.008461, 0.042221, 0.189158, 0.0106, 0.061345, 0.056776, 0.009639, 0.095182, 0.25223, 0.01183, 0.055358, 0.088752, 0.006093, 0.035118, 0.070063, 0.007676, 0.031919, 0.059464, 0.0086, 0.010329, 0.079525, 0.007947, 0.049272, 0.107952, 0.009283, 0.033549, 0.083412, 0.006204, 0.019579, 0.080907, 0.007711, 0.021272, 0.038212, 0.009, 0.014647, 0.041325, 0.007837, 0.029438, 0.019307, 0.009218, 0.0286, 0.061819, 0.006449, 0.04887, 0.05964, 0.007723, 0.058305, 0.034659, 0.0093, 0.014175, 0.030628, 0.007815, 0.019226, 0.024974, 0.009085};
    private final double[][] coords = {{-0.840520439988, 0.251236972341, -0.480005597563}, {0.9814339134, -0.191797895758, 0.00102020157318}, {-0.955293038943, -0.171462853144, 0.240864484178}, {0.884096563515, -0.0510448362307, -0.464508009699}, {-0.740091119785, -0.354222922159, 0.571656589075}, {0.568022639788, -0.0418113612771, -0.821950175349}, {-0.815494393476, -0.509683995923, 0.274209989806}, {0.117286198689, 0.160121158211, -0.980104669048}, {-0.877336828014, 0.139761797021, 0.459071596054}, {0.922063885321, 0.028591128227, -0.385980231065}, {0.977466549127, -0.0499956794439, -0.205084317719}, {-0.962280468126, 0.206130068464, -0.177557583726}, {0.835347749015, -0.417163894197, 0.358006178149}, {-0.843690894955, 0.371346415676, -0.387669335046}, {0.446877359685, -0.567268977135, 0.691741666362}, {-0.511024992739, 0.504904932945, -0.695646796502}, {-0.681249363051, 0.730201413091, -0.0520115531671}, {0.774191188537, -0.630369110034, -0.0571208255047}, {0.423475119964, -0.834705176219, -0.352045581657}, {0.693167203159, -0.720730552917, 0.00816691844665}, {0.30004358509, -0.890945747563, -0.340865841565}, {0.46422529739, -0.884578753489, 0.0448921166707}, {0.655160369331, -0.735779791725, -0.171443834965}, {0.405310151205, -0.769783007578, -0.493110335093}, {0.209243269664, -0.947208557308, -0.242926332585}, {0.493075645756, -0.861606304385, -0.120461544926}, {0.60182153356, -0.724225913267, -0.336612044194}, {0.319231733984, -0.920978452994, -0.223360222819}, {0.786943256562, -0.593014308771, -0.170453338321}, {-0.00408038799316, -0.374375598373, -0.927268171446}, {-0.123584417003, 0.18793002255, 0.97437631257}, {0.49378604147, 0.326470110063, -0.805973084218}, {-0.882976391784, -0.0193724612516, 0.469017482934}, {0.984036808696, 0.135623725965, -0.115229180707}, {-0.97872532189, 0.0826660595132, 0.187784629018}, {0.900929419262, 0.378533198807, -0.21222346456}, {0.976239430559, -0.171377454894, 0.132613506763}, {-0.978994554933, -0.186815436447, 0.0816679503594}, {0.842285008542, 0.0326704488162, -0.538041453941}, {-0.735384340313, -0.215209564225, 0.64256884105}, {0.688828228668, -0.0591882033522, -0.722504275402}};

    private final int[] residueModels = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

    private final double tauC = 3.3e-9;

//    private final double[] guesses = {0.75 * Di, Di, 1.25 * Di, Math.PI / 2, Math.PI / 2, Math.PI / 2};
//    private final double[] guesses = {4.4170 * 1e7, 4.5832 * 1e7, 6.0129 * 1e7, Math.toRadians(98.06),
//            Math.toRadians(68.64), Math.toRadians(77.42)};
    private final double[] fields = {400.0e6, 500e6, 600e6, 700e6, 800.0e6};

    private BondVectorData loadVectors(String vectorFileName) throws IOException {
        File file = new File(vectorFileName);
        Path path = file.toPath();
        Map<String, double[]> coordMap = new HashMap<>();

        Files.lines(path).forEach(line -> {
            String[] fields = line.split("\t");
            System.out.println(line + " " + fields.length);
            if (fields.length == 5) {
                int iRes = Integer.valueOf(fields[0]);
                String chain = "A";
                String resSpecifier = chain + iRes;
                double[] v = new double[3];
                v[0] = Double.valueOf(fields[2]);
                v[1] = Double.valueOf(fields[3]);
                v[2] = Double.valueOf(fields[4]);
                coordMap.put(resSpecifier, v);
            }
        });
        Map<String, Integer> coordIndices = new HashMap<>();
        double[][] vectors = new double[coordMap.size()][3];
        List<String> names = new ArrayList<>();
        coordMap.keySet().stream().sorted().forEach(k -> {

            int i = coordIndices.size();
            double[] v = coordMap.get(k);
            vectors[i][0] = v[0];
            vectors[i][1] = v[1];
            vectors[i][2] = v[2];
            coordIndices.put(k, i);
            names.add(k);
        });
        System.out.println(coordIndices);
        BondVectorData bData = new BondVectorData(vectors, names, coordIndices);
        return bData;
    }

    private List<RelaxDataValue> loadData(String relaxDataFileName, BondVectorData bData) throws IOException {

        File relaxFile = new File(relaxDataFileName);
        Path relaxPath = relaxFile.toPath();
        Map<Integer, Integer> fieldMap = new HashMap<>();
        List<RelaxDataValue> result = new ArrayList<>();
        Files.lines(relaxPath).forEach(line -> {
            String[] fields = line.split("\\s+");
            if (fields.length == 11) {
                int iRes = Integer.valueOf(fields[0]);
                String chain = fields[1];
                String resSpecifier = chain + iRes;
                Integer resIndex = bData.getIndex(resSpecifier);
                if (resIndex == null) {
                    System.out.println("no res " + resSpecifier);
                } else {
                    double field = Double.valueOf(fields[4]);
                    String e1 = fields[3];
                    String e2 = fields[2];
                    RelaxEquations relaxObj = RelaxEquations.getRelaxEquations(field * 1e6, e1, e2);

                    double r1 = Double.valueOf(fields[5]);
                    double r1Error = Double.valueOf(fields[6]);
                    double r2 = Double.valueOf(fields[7]);
                    double r2Error = Double.valueOf(fields[8]);
                    double noe = Double.valueOf(fields[9]);
                    double noeError = Double.valueOf(fields[10]);
                    RelaxDataValue dValue = new RelaxDataValue(resIndex, resSpecifier, r1, r1Error, r2, r2Error, noe, noeError, relaxObj);
                    result.add(dValue);
                }
            }
        });
        return result;
    }

    public double[] scalePars(double[] pars, int nDiffPars) {
        double[] scaledPars = new double[pars.length];
        for (int p = 0; p < pars.length; p++) {
            double newPar = pars[p];
            if (p < nDiffPars) {
                newPar /= 1.0e7;
            } else if (p >= nDiffPars) {
                newPar *= 180.0 / Math.PI;
            }
            scaledPars[p] = newPar;
        }
        return scaledPars;
    }

    @Test
    public void testValueDMat1() {
        RelaxFit relaxFit = new RelaxFit();
        relaxFit.makeRelaxObjs(fields, "H", "N");

        relaxFit.setXYE(xVals, yVals, errVals);
        relaxFit.setCoords(coords);
        relaxFit.setDiffusionType(DiffusionType.ANISOTROPIC);
        relaxFit.setResidueModels(residueModels, true);
        double[] pars = {4.4170 * 1e7, 4.5832 * 1e7, 6.0129 * 1e7, Math.toRadians(98.06),
            Math.toRadians(68.64), Math.toRadians(77.42)};

        double value = relaxFit.calcD(fields[0], pars);
        System.out.println("value " + value);
        Assert.assertEquals(0.0, value, 1.0e-1);
    }

    @Test
    public void testValueDMat() {
        RelaxFit relaxFit = new RelaxFit();
        relaxFit.makeRelaxObjs(fields, "H", "N");
        System.out.println(errVals.length);

        relaxFit.setXYE(xVals, yVals, errVals);
        relaxFit.setCoords(coords);
        relaxFit.setResidueModels(residueModels, true);

        double[] rotDifPars = {4.4170, 4.5832, 6.0129, 98.06, 68.64, 77.42};
        double bestFitRMS = Double.MAX_VALUE;
        double[] bestGuesses = null;
        double[] bestFitPars = null;
        DiffusionType bestType = null;

        double isoD = 1.0 / (6.0 * tauC);
        for (DiffusionType diffType : DiffusionType.values()) {
            if (diffType == DiffusionType.ISOTROPIC) {
                continue;
            }
            int nPars = diffType.getNAnglePars() + diffType.getNDiffusionPars();
            double[] guess = new double[nPars];
            relaxFit.setDiffusionType(diffType);
            System.out.println("ddddddddddddddd " + diffType.toString() + " " + nPars);
            System.arraycopy(diffType.getGuess(isoD), 0, guess, 0, diffType.getNDiffusionPars());
            int nGuesses = diffType.getNAngleGuesses();
            for (int iGuess = 0; iGuess < nGuesses; iGuess++) {
                double[] angleGuess = diffType.getAngles(iGuess);
                System.arraycopy(angleGuess, 0, guess, diffType.getNDiffusionPars(), diffType.getNAnglePars());
                PointValuePair fitResult = relaxFit.fitD(fields[0], guess);
                double fitRMS = fitResult.getValue();
                double[] scaledGuesses = scalePars(guess, diffType.getNDiffusionPars());
                double[] fitPars = relaxFit.getPars();
                Arrays.sort(fitPars, 0, diffType.getNDiffusionPars());
                double[] scaledPars = scalePars(fitPars, diffType.getNDiffusionPars());

                System.out.println("RMS: " + fitRMS);
                System.out.println("Scaled guesses, Fit Pars, RotDif Pars: ");
                for (int i = 0; i < scaledGuesses.length; i++) {
                    System.out.printf("guess %7.3f best Fit %7.3f RotDif %7.3f\n",
                            scaledGuesses[i], scaledPars[i], rotDifPars[i]);
                }
                System.out.println();

                if (fitRMS < bestFitRMS) {
                    bestGuesses = guess.clone();
                    bestFitRMS = fitRMS;
                    bestFitPars = fitPars.clone();
                    bestType = diffType;
                }
            }
        }
        relaxFit.setDiffusionType(bestType);
        double[][][] rotResults = relaxFit.rotateD(bestFitPars);
        double[][] D = rotResults[0];
        double[][] VT = rotResults[1];

        double[] scaledBestGuesses = scalePars(bestGuesses, bestType.getNDiffusionPars());
        double[] scaledBestFitPars = scalePars(bestFitPars, bestType.getNDiffusionPars());

        System.out.println("\nbest Fit RMS: " + bestFitRMS + " " + bestType.toString());
        System.out.println("Scaled best guesses, best Fit Pars, RotDif Pars: ");
        for (int i = 0; i < scaledBestGuesses.length; i++) {
            System.out.printf("guess %7.3f best Fit %7.3f RotDif %7.3f\n",
                    scaledBestGuesses[i], scaledBestFitPars[i], rotDifPars[i]);
        }
        System.out.println();
        System.out.println("best Fit D = " + new Array2DRowRealMatrix(D).toString());
        System.out.println("best Fit VT = " + new Array2DRowRealMatrix(VT).toString());
    }

    @Test
    public void testValueDMatFile() {
        RelaxFit relaxFit = new RelaxFit();
        try {
            BondVectorData bData = loadVectors("src/test/data/1P7F_A_vectors.txt");
            System.out.println(bData);
            List<RelaxDataValue> rData = loadData("src/test/data/1P7F_data.txt", bData);
            relaxFit.setBondVectorData(bData);
            relaxFit.setRelaxData(rData);
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
            return;
        }
        double[] rotDifPars = {4.4170, 4.5832, 6.0129, 98.06, 68.64, 77.42};
        double bestFitRMS = Double.MAX_VALUE;
        double[] bestGuesses = null;
        double[] bestFitPars = null;
        DiffusionType bestType = null;
        double isoD = 1.0 / (6.0 * tauC);
        for (DiffusionType diffType : DiffusionType.values()) {
            if (diffType == DiffusionType.ISOTROPIC) {
                continue;
            }
            int nPars = diffType.getNAnglePars() + diffType.getNDiffusionPars();
            double[] guess = new double[nPars];
            relaxFit.setDiffusionType(diffType);
            System.arraycopy(diffType.getGuess(isoD), 0, guess, 0, diffType.getNDiffusionPars());
            int nGuesses = diffType.getNAngleGuesses();
            for (int iGuess = 0; iGuess < nGuesses; iGuess++) {
                double[] angleGuess = diffType.getAngles(iGuess);
                System.arraycopy(angleGuess, 0, guess, diffType.getNDiffusionPars(), diffType.getNAnglePars());
                PointValuePair fitResult = relaxFit.fitD2(guess);
                double fitRMS = fitResult.getValue();
                double[] scaledGuesses = scalePars(guess, diffType.getNDiffusionPars());
                double[] fitPars = relaxFit.getPars();
                Arrays.sort(fitPars, 0, diffType.getNDiffusionPars());
                double[] scaledPars = scalePars(fitPars, diffType.getNDiffusionPars());

                System.out.println("RMS: " + fitRMS);
                System.out.println("Scaled guesses, Fit Pars, RotDif Pars: ");
                for (int i = 0; i < scaledGuesses.length; i++) {
                    System.out.printf("guess %7.3f best Fit %7.3f RotDif %7.3f\n",
                            scaledGuesses[i], scaledPars[i], rotDifPars[i]);
                }
                System.out.println();

                if (fitRMS < bestFitRMS) {
                    bestGuesses = guess.clone();
                    bestFitRMS = fitRMS;
                    bestFitPars = fitPars.clone();
                    bestType = diffType;
                }
            }
        }
        relaxFit.setDiffusionType(bestType);
        double[][][] rotResults = relaxFit.rotateD(bestFitPars);
        double[][] D = rotResults[0];
        double[][] VT = rotResults[1];

        double[] scaledBestGuesses = scalePars(bestGuesses, bestType.getNDiffusionPars());
        double[] scaledBestFitPars = scalePars(bestFitPars, bestType.getNDiffusionPars());

        System.out.println("\nbest Fit RMS: " + bestFitRMS + " " + bestType.toString());
        System.out.println("Scaled best guesses, best Fit Pars, RotDif Pars: ");
        for (int i = 0; i < scaledBestGuesses.length; i++) {
            System.out.printf("guess %7.3f best Fit %7.3f RotDif %7.3f\n",
                    scaledBestGuesses[i], scaledBestFitPars[i], rotDifPars[i]);
        }
        System.out.println();
        System.out.println("best Fit D = " + new Array2DRowRealMatrix(D).toString());
        System.out.println("best Fit VT = " + new Array2DRowRealMatrix(VT).toString());

    }

}
